import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from io import BytesIO
from resume_parser import extract_text_from_pdf
from skill_matcher import extract_skills, match_roles, load_skills_database,get_missing_skills
from skill_matcher import load_course_recommendations

def generate_pdf_summary(best_role, best_match, missing_skills, courses):
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter

    # Title
    y = height - 50
    c.setFont("Helvetica-Bold", 16)
    c.setFillColor(colors.darkblue)
    c.drawString(50, y, "📄 Smart Career Recommender - Summary Report")

    # Best Role
    y -= 40
    c.setFont("Helvetica-Bold", 12)
    c.setFillColor(colors.black)
    c.drawString(50, y, "🎯 Best Matched Role:")
    c.setFont("Helvetica", 12)
    c.drawString(200, y, best_role)

    # Match %
    y -= 20
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y, "📊 Match Percentage:")
    c.setFont("Helvetica", 12)
    c.drawString(200, y, f"{best_match}%")

    # Missing Skills
    y -= 30
    c.setFont("Helvetica-Bold", 12)
    c.setFillColor(colors.darkred)
    c.drawString(50, y, "❌ Missing Skills:")
    y -= 20
    c.setFont("Helvetica", 11)
    c.setFillColor(colors.black)
    if missing_skills:
        for skill in missing_skills:
            c.drawString(70, y, f"- {skill}")
            y -= 15
    else:
        c.drawString(70, y, "None")

    # Course Recommendations
    y -= 30
    c.setFont("Helvetica-Bold", 12)
    c.setFillColor(colors.darkgreen)
    c.drawString(50, y, "📚 Recommended Courses:")
    y -= 20
    c.setFont("Helvetica", 11)
    c.setFillColor(colors.black)
    for skill in missing_skills:
        rec = courses.get(skill.lower())
        if rec:
            course_line = f"- {skill.title()}: {rec['course']} ({rec['platform']})"
            c.drawString(70, y, course_line)
            y -= 15

    # Footer
    y -= 40
    c.setFont("Helvetica-Oblique", 10)
    c.setFillColor(colors.grey)
    c.drawString(50, y, "Generated by Smart Career Recommender | Manojit Karar")

    c.save()
    buffer.seek(0)
    return buffer

st.set_page_config(page_title="Smart Career Recommender", layout="centered")

with st.container():
    st.title("📄 Smart Career Recommender & Resume Analyzer")
    st.subheader("Upload your resume to discover your best-fit tech career path 🚀")
    st.markdown("---")  # adds a divider

# Upload resume
with st.container():
    uploaded_file = st.file_uploader("Upload your resume (PDF only)", type=["pdf"])

if uploaded_file:
    with open("resumes/temp_resume.pdf", "wb") as f:
        f.write(uploaded_file.read())

    # Extract resume text
    resume_text = extract_text_from_pdf("resumes/temp_resume.pdf")

    # Load skills data and extract skills from resume
    skills_db = load_skills_database()
    found_skills = extract_skills(resume_text, skills_db)

    # Match roles
    role_matches = match_roles(found_skills, skills_db)
    missing_skills_dict = get_missing_skills(found_skills, skills_db)

    # Display results
    st.markdown("---")
    st.markdown("### ✅ Skills Detected:")
    st.write(", ".join(found_skills) if found_skills else "No known skills found.")

        # Role Match % Bar Chart
    if role_matches:
        role_names = [role for role, _ in role_matches]
        match_percents = [percent for _, percent in role_matches]

        df = pd.DataFrame({
            'Role': role_names,
            'Match %': match_percents
        })
        st.markdown("---")
        st.markdown("### 📊 Skill Match Overview")
        fig, ax = plt.subplots(figsize=(8, len(role_names) * 0.4))
        ax.barh(df['Role'], df['Match %'], color='skyblue')
        ax.invert_yaxis()
        ax.set_xlabel("Match %")
        ax.set_title("Resume vs Career Role Match")
        st.pyplot(fig)

    st.markdown("---")
    st.markdown("### 🎯 Role Match Recommendations:")
    if role_matches:
        for role, percent in role_matches:
            st.markdown(f"{role}** — {percent}% match")

            missing = missing_skills_dict.get(role, [])
            if missing:
                st.write(f"❌ Missing Skills for {role}: {', '.join(missing)}")
            st.markdown("---")
    else:
        st.write("No roles matched.")

    # Load course recommendations
    course_recs = load_course_recommendations()
    st.markdown("---")
    st.markdown("### 📚 Recommended Courses for Missing Skills:")
    for role, missing_skills in missing_skills_dict.items():
        if missing_skills:
            st.subheader(f"For {role}:")
            for skill in missing_skills:
                rec = course_recs.get(skill.lower())
                if rec:
                    st.markdown(f"- *{skill.title()}*: [{rec['course']}]({rec['url']}) on {rec['platform']}")
            st.markdown("---")

    with st.container():
        st.markdown("### 🧠 Resume Analysis")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("✅ Skills Detected:")
            st.write(", ".join(found_skills) if found_skills else "None")

        with col2:
            st.markdown("❌ Missing Skills (Overall):")
            all_missing = set()
            for m in missing_skills_dict.values():
                all_missing.update(m)
            st.write(", ".join(all_missing) if all_missing else "None")
        
# 🧾 Summary Section
    if role_matches:
        best_role, best_match = role_matches[0]
        missing = missing_skills_dict.get(best_role, [])
    
        st.markdown("---")
        st.markdown("## 🧾 Summary")
        st.success(f"*Best Matched Role:* {best_role}")
        st.info(f"*Match Percentage:* {best_match}%")

        if missing:
            st.warning(f"*Skills to Improve:* {', '.join(missing)}")
            st.markdown("💡 Consider learning these skills to improve your fit for this role.")
        else:
            st.balloons()
            st.markdown("🎉 You're a great fit already!")
        
        pdf = generate_pdf_summary(best_role, best_match, missing, course_recs)

        st.download_button(
            label="📄 Download Summary as PDF",
            data=pdf,
            file_name="career_summary.pdf",
            mime="application/pdf"
        )
    
        st.markdown("---")
    st.markdown("Made with ❤ by Manojit Karar")
    st.caption("Built using Python, Streamlit, spaCy, and Matplotlib")
        